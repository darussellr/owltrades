/* global use, db */
// MongoDB Playground

// Use the appropriate database
use('stock_trading_models');

// Insert model metadata and performance into the 'models' collection (no features)
db.getCollection('models').insertOne({
    "symbol": "AAPL",  // Stock symbol
    "label": "6m",  // Label for the model (e.g., 6 months data, full history)
    "training_start_date": new Date('2023-04-01'),  // Start of training period
    "training_end_date": new Date('2023-10-01'),  // End of training period
    "model_hyperparameters": {  // Store hyperparameters used for training
        "n_estimators": 100,
        "learning_rate": 0.1,
        "max_depth": 5,
        "subsample": 0.8,
        "colsample_bytree": 0.8
    },
    "performance": {  // Performance metrics for model evaluation
        "accuracy": 0.85,
        "precision": 0.83,
        "recall": 0.80,
        "f1_score": 0.82,
        "sharpe_ratio": 1.5,
        "maximum_drawdown": -0.12,
        "annualized_return": 0.25,
        "cumulative_return": 0.20
    },
    "model": Binary(binaryModelData),  // Store the binary model file
    "version": 1,  // Model versioning for retraining purposes
    "date_saved": new Date()  // Timestamp of when the model was saved
});

// Store predicted buy/sell signals generated by the model
db.getCollection('predictions').insertMany([
    {
        "symbol": "AAPL",
        "model_label": "6m",
        "date": new Date('2023-10-05'),
        "predicted_signal": 1,  // 1 = Buy, 0 = Sell/Hold
        "close_price": 150.25
    },
    {
        "symbol": "AAPL",
        "model_label": "6m",
        "date": new Date('2023-10-06'),
        "predicted_signal": 0,
        "close_price": 151.75
    }
]);

// Fetch all models stored for a specific stock symbol (e.g., AAPL)
const modelsForAAPL = db.getCollection('models').find({
    symbol: "AAPL"
}).toArray();

// Print out all models for AAPL
console.log("Models for AAPL:", modelsForAAPL);

// Fetch performance metrics for the most recent model for AAPL
const recentModelPerformance = db.getCollection('models').find({
    symbol: "AAPL"
}).sort({ date_saved: -1 }).limit(1).toArray();

// Print out the performance metrics of the most recent model
console.log("Most recent model performance for AAPL:", recentModelPerformance);

// Run an aggregation to calculate average accuracy across all models for a specific stock symbol
db.getCollection('models').aggregate([
    { $match: { symbol: "AAPL" } },
    { $group: { _id: "$symbol", avg_accuracy: { $avg: "$performance.accuracy" } } }
]).toArray();

// Fetch predictions generated by the model for a specific symbol and time range
const recentPredictions = db.getCollection('predictions').find({
    symbol: "AAPL",
    date: { $gte: new Date('2023-10-01'), $lt: new Date('2023-11-01') }
}).toArray();

// Print out recent predictions for AAPL
console.log("Recent predictions for AAPL:", recentPredictions);
